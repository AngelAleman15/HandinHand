// Variables globales
let currentChatUserId = null;
let socket = null;
let onlineUsers = new Set();
let replyingToMessage = null; // Para almacenar el mensaje al que se est√° respondiendo

// Funci√≥n para mostrar notificaciones
function showNotification(message, type = 'success') {
    // Crear o usar elemento de notificaci√≥n existente
    let notification = document.querySelector('.chat-notification');
    
    if (!notification) {
        notification = document.createElement('div');
        notification.className = 'chat-notification';
        document.body.appendChild(notification);
    }
    
    // Limpiar clases anteriores
    notification.classList.remove('show', 'success', 'error');
    
    // Configurar la notificaci√≥n
    notification.className = `chat-notification ${type}`;
    
    const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
    notification.innerHTML = `
        <i class="fas ${icon}"></i>
        <span>${message}</span>
    `;
    
    // Mostrar la notificaci√≥n
    setTimeout(() => notification.classList.add('show'), 10);
    
    // Ocultar despu√©s de 3 segundos
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

// Funciones globales (necesarias para ser llamadas desde HTML inline)
function replyToMessage(messageId, messageText, senderName) {
    replyingToMessage = {
        id: messageId,
        text: messageText,
        sender: senderName
    };

    // Mostrar vista previa de respuesta
    const replyPreview = document.getElementById('reply-preview');
    const replyUsername = document.getElementById('reply-preview-username');
    const replyText = document.getElementById('reply-preview-text');

    if (replyPreview && replyUsername && replyText) {
        replyUsername.textContent = `Respondiendo a ${senderName}`;
        replyText.textContent = messageText;
        replyPreview.classList.add('show');
    }

    // Enfocar el input
    const messageInput = document.getElementById('message-input');
    if (messageInput) {
        messageInput.focus();
    }

    // Cerrar el men√∫ de opciones
    document.querySelectorAll('.message-options-menu').forEach(menu => {
        menu.classList.remove('show');
    });
}

function cancelReply() {
    replyingToMessage = null;
    const replyPreview = document.getElementById('reply-preview');
    if (replyPreview) {
        replyPreview.classList.remove('show');
    }
}

// Funci√≥n para mostrar el modal de confirmaci√≥n
function deleteChatHistory() {
    if (!currentChatUserId) return;
    
    const modal = document.getElementById('deleteConfirmModal');
    if (modal) {
        modal.classList.add('show');
    }
    
    // Cerrar el men√∫ de opciones
    const chatOptionsMenu = document.getElementById('chat-options-menu');
    if (chatOptionsMenu) {
        chatOptionsMenu.classList.remove('show');
    }
}

// Funci√≥n para cerrar el modal
function closeDeleteModal() {
    const modal = document.getElementById('deleteConfirmModal');
    if (modal) {
        modal.classList.remove('show');
    }
}

// Funci√≥n para confirmar la eliminaci√≥n
async function confirmDeleteHistory() {
    if (!currentChatUserId) return;

    try {
        const response = await fetch('/MisTrabajos/HandinHand/api/delete-chat-history.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                other_user_id: currentChatUserId
            })
        });

        const result = await response.json();

        if (result.status === 'success') {
            // Limpiar mensajes de la pantalla
            const chatMessages = document.getElementById('chat-messages');
            if (chatMessages) {
                chatMessages.innerHTML = '';
            }
            
            // Cerrar el modal
            closeDeleteModal();
            
            // Mostrar notificaci√≥n de √©xito
            showSuccessNotification('Historial eliminado correctamente');
        } else {
            // Cerrar el modal
            closeDeleteModal();
            
            // Mostrar error
            showErrorNotification('Error al eliminar el historial');
        }
    } catch (error) {
        console.error('Error al eliminar historial:', error);
        
        // Cerrar el modal
        closeDeleteModal();
        
        // Mostrar error
        showErrorNotification('Error de conexi√≥n');
    }
}

// Funci√≥n para mostrar notificaci√≥n de √©xito
function showSuccessNotification(message) {
    // Crear elemento de notificaci√≥n
    const notification = document.createElement('div');
    notification.className = 'chat-notification success';
    notification.innerHTML = `
        <i class="fas fa-check-circle"></i>
        <span>${message}</span>
    `;
    
    document.body.appendChild(notification);
    
    // Mostrar con animaci√≥n
    setTimeout(() => notification.classList.add('show'), 10);
    
    // Ocultar despu√©s de 3 segundos
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// Funci√≥n para mostrar notificaci√≥n de error
function showErrorNotification(message) {
    // Crear elemento de notificaci√≥n
    const notification = document.createElement('div');
    notification.className = 'chat-notification error';
    notification.innerHTML = `
        <i class="fas fa-exclamation-circle"></i>
        <span>${message}</span>
    `;
    
    document.body.appendChild(notification);
    
    // Mostrar con animaci√≥n
    setTimeout(() => notification.classList.add('show'), 10);
    
    // Ocultar despu√©s de 3 segundos
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// Esperar a que el DOM est√© completamente cargado
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Inicializando sistema de chat...');

    // Elementos del DOM
    const contactsList = document.getElementById('contacts-list');
    const chatMessages = document.getElementById('chat-messages');
    const messageInput = document.getElementById('message-input');
    const sendBtn = document.getElementById('send-btn');
    const searchInput = document.getElementById('search-contacts');
    const welcomeScreen = document.getElementById('welcome-screen');
    const chatPanel = document.getElementById('chat-panel');
    const chatOptionsBtn = document.getElementById('chat-options-btn');
    const chatOptionsMenu = document.getElementById('chat-options-menu');
    const deleteChatHistoryBtn = document.getElementById('delete-chat-history');
    const replyPreview = document.getElementById('reply-preview');
    const cancelReplyBtn = document.getElementById('cancel-reply');

    // Inicializar Socket.IO
    initializeSocket();

    // Cargar usuarios
    loadUsers();

    // Eventos de b√∫squeda
    if (searchInput) {
        searchInput.addEventListener('input', (e) => {
            filterContacts(e.target.value);
        });
    }

    // Eventos para men√∫ de opciones del chat
    if (chatOptionsBtn) {
        chatOptionsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            chatOptionsMenu.classList.toggle('show');
        });
    }

    // Cerrar men√∫ al hacer clic fuera
    document.addEventListener('click', () => {
        if (chatOptionsMenu) {
            chatOptionsMenu.classList.remove('show');
        }
        // Cerrar todos los men√∫s de opciones de mensajes
        document.querySelectorAll('.message-options-menu').forEach(menu => {
            menu.classList.remove('show');
        });
    });

    // Event listener para cerrar modal al hacer clic fuera
    const deleteModal = document.getElementById('deleteConfirmModal');
    if (deleteModal) {
        deleteModal.addEventListener('click', (e) => {
            if (e.target === deleteModal) {
                closeDeleteModal();
            }
        });
    }

    // Eliminar historial de chat
    if (deleteChatHistoryBtn) {
        deleteChatHistoryBtn.addEventListener('click', deleteChatHistory);
    }

    // Cancelar respuesta
    if (cancelReplyBtn) {
        cancelReplyBtn.addEventListener('click', cancelReply);
    }

    // Eventos de env√≠o de mensajes
    if (messageInput) {
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }

    if (sendBtn) {
        sendBtn.addEventListener('click', sendMessage);
    }

    // Funci√≥n para inicializar Socket.IO
    function initializeSocket() {
        try {
            console.log('üì° Conectando a Socket.IO en:', CHAT_SERVER_URL);
            socket = io(CHAT_SERVER_URL);

            socket.on('connect', () => {
                console.log('‚úÖ Conectado al servidor de chat');
                socket.emit('user_connected', CURRENT_USER_ID);
            });

            socket.on('disconnect', () => {
                console.log('‚ùå Desconectado del servidor de chat');
            });

            socket.on('chat_message', (data) => {
                console.log('üîî Evento chat_message recibido del servidor!', data);
                handleIncomingMessage(data);
            });

            socket.on('users_online', (users) => {
                console.log('üë• Evento users_online recibido:', users);
                updateOnlineStatus(users);
            });

            socket.on('message_edited', (data) => {
                console.log('üìù Mensaje editado recibido via Socket.IO:', data);
                console.log('   Buscando mensaje con ID:', data.message_id);
                
                const messageBubble = document.querySelector(`.message-bubble[data-message-id="${data.message_id}"]`);
                console.log('   Mensaje encontrado:', !!messageBubble);
                
                if (messageBubble) {
                    const messageText = messageBubble.querySelector('.message-text');
                    console.log('   messageText encontrado:', !!messageText);
                    
                    if (messageText) {
                        console.log('   Texto anterior:', messageText.textContent);
                        messageText.textContent = data.new_message;
                        console.log('   Texto actualizado:', data.new_message);
                        
                        // Agregar indicador de editado si no existe
                        let editedLabel = messageBubble.querySelector('.message-edited');
                        if (!editedLabel) {
                            editedLabel = document.createElement('span');
                            editedLabel.className = 'message-edited';
                            editedLabel.textContent = ' (editado)';
                            messageBubble.appendChild(editedLabel);
                            console.log('   ‚úÖ Etiqueta (editado) agregada');
                        }
                    }
                } else {
                    console.warn('   ‚ö†Ô∏è No se encontr√≥ el mensaje con data-message-id=' + data.message_id);
                }
            });

            socket.on('message_deleted', (data) => {
                console.log('üóëÔ∏è Mensaje eliminado recibido:', data);
                
                const messageDiv = document.querySelector(`[data-message-id="${data.message_id}"]`)?.closest('.message');
                if (messageDiv) {
                    messageDiv.remove();
                }
            });

            socket.on('error', (error) => {
                console.error('Error de Socket.io:', error);
            });

        } catch (error) {
            console.error('Error al inicializar Socket.io:', error);
        }
    }

    // Funci√≥n para cargar usuarios
    async function loadUsers() {
        try {
            const response = await fetch('/MisTrabajos/HandinHand/api/users.php');
            const data = await response.json();

            if (data.status === 'success' && data.users) {
                renderContacts(data.users);
                loadUnreadCounts();
            }
        } catch (error) {
            console.error('Error al cargar usuarios:', error);
        }
    }

    // Funci√≥n para renderizar contactos
    function renderContacts(users) {
        if (!contactsList) return;

        contactsList.innerHTML = users.map(user => {
            // Formatear el √∫ltimo mensaje
            let lastMessagePreview = 'Haz clic para chatear';
            if (user.last_message) {
                const sender = user.last_message_sender || '';
                lastMessagePreview = `${sender}: ${user.last_message}`;
            }
            
            // Formatear la hora del √∫ltimo mensaje
            let lastMessageTime = '';
            if (user.last_message_time) {
                const date = new Date(user.last_message_time);
                const now = new Date();
                const diffInHours = (now - date) / (1000 * 60 * 60);
                
                if (diffInHours < 24) {
                    // Si es de hoy, mostrar solo la hora
                    lastMessageTime = date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
                } else if (diffInHours < 48) {
                    // Si es de ayer
                    lastMessageTime = 'Ayer';
                } else if (diffInHours < 168) {
                    // Si es de esta semana
                    lastMessageTime = date.toLocaleDateString('es-ES', { weekday: 'short' });
                } else {
                    // Si es m√°s antiguo
                    lastMessageTime = date.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit' });
                }
            }
            
            // Bot√≥n de rechazar solo para no-amigos
            const botonRechazar = !user.es_amigo ? `
                <button class="btn-rechazar-contacto" onclick="rechazarContacto(${user.id}, '${user.username}', event)" title="Rechazar y eliminar chat">
                    <i class="fas fa-times-circle"></i>
                </button>
            ` : '';
            
            // Badge de no-amigo
            const badgeNoAmigo = !user.es_amigo ? `
                <span class="badge-no-amigo" title="No es tu amigo">
                    <i class="fas fa-user-slash"></i>
                </span>
            ` : '';
            
            return `
                <div class="contact-item ${!user.es_amigo ? 'no-amigo' : ''}" data-user-id="${user.id}" data-username="${user.username}">
                    <div class="contact-avatar">
                        <img src="${user.avatar}" alt="${user.username}">
                        <div class="status-indicator offline" data-user-id="${user.id}"></div>
                        <span class="unread-badge" data-user-id="${user.id}">0</span>
                    </div>
                    <div class="contact-info">
                        <div class="contact-name">
                            ${user.username}
                            ${badgeNoAmigo}
                        </div>
                        <div class="contact-preview">${lastMessagePreview}</div>
                    </div>
                    <div class="contact-meta">
                        <div class="contact-time">${lastMessageTime}</div>
                        ${botonRechazar}
                    </div>
                </div>
            `;
        }).join('');

        // Agregar eventos a los contactos
        document.querySelectorAll('.contact-item').forEach(item => {
            item.addEventListener('click', (e) => {
                // No abrir el chat si se hace clic en el bot√≥n de rechazar
                if (e.target.closest('.btn-rechazar-contacto')) {
                    return;
                }
                const userId = item.dataset.userId;
                const username = item.dataset.username;
                const avatar = item.querySelector('img').src;
                selectUser(userId, username, avatar);
            });
        });
    }

    // Funci√≥n para actualizar la vista previa del √∫ltimo mensaje de un contacto
    function updateContactPreview(userId, messageText, senderName) {
        const contactItem = document.querySelector(`.contact-item[data-user-id="${userId}"]`);
        if (!contactItem) return;
        
        const preview = contactItem.querySelector('.contact-preview');
        const timeElement = contactItem.querySelector('.contact-time');
        
        if (preview) {
            // Truncar mensaje si es muy largo
            let displayText = messageText;
            if (displayText.length > 40) {
                displayText = displayText.substring(0, 40) + '...';
            }
            preview.textContent = `${senderName}: ${displayText}`;
        }
        
        if (timeElement) {
            const now = new Date();
            timeElement.textContent = now.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
        }
    }

    // Funci√≥n para rechazar y eliminar contacto no-amigo
    async function rechazarContacto(userId, username, event) {
        event.preventDefault();
        event.stopPropagation();
        
        console.log('üö´ Intentando rechazar contacto:', userId, username);
        
        // Confirmar con SweetAlert2
        const result = await Swal.fire({
            title: '¬øRechazar contacto?',
            html: `¬øDeseas rechazar a <strong>${username}</strong> y eliminar todo el historial de chat?<br><small>Esta acci√≥n no se puede deshacer.</small>`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'S√≠, rechazar',
            cancelButtonText: 'Cancelar',
            reverseButtons: true
        });
        
        if (!result.isConfirmed) {
            return;
        }
        
        try {
            const response = await fetch('/MisTrabajos/HandinHand/api/bloquear-contacto.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    action: 'eliminar_chat',
                    contacto_id: userId
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Contacto rechazado',
                    text: 'El chat ha sido eliminado correctamente.',
                    timer: 2000,
                    showConfirmButton: false
                });
                
                // Si el chat actual es con este usuario, cerrarlo
                if (currentChatUserId == userId) {
                    currentChatUserId = null;
                    if (chatPanel) chatPanel.classList.remove('active');
                    if (welcomeScreen) welcomeScreen.classList.remove('hidden');
                }
                
                // Recargar la lista de contactos
                await loadUsers();
                
            } else {
                throw new Error(data.message || 'Error al rechazar el contacto');
            }
        } catch (error) {
            console.error('Error al rechazar contacto:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'No se pudo rechazar el contacto. Intenta de nuevo.',
                confirmButtonText: 'OK'
            });
        }
    }
    
    // Hacer la funci√≥n accesible globalmente
    window.rechazarContacto = rechazarContacto;

    // Funci√≥n para seleccionar un usuario
    async function selectUser(userId, username, avatar) {
        console.log('üë§ Seleccionando usuario:', userId, username);

        currentChatUserId = userId;

        // Mostrar panel de chat y ocultar bienvenida
        if (welcomeScreen) welcomeScreen.classList.add('hidden');
        if (chatPanel) chatPanel.classList.add('active');

        // Actualizar header del chat
        updateChatHeader(userId, username, avatar);

        // Marcar contacto como activo
        document.querySelectorAll('.contact-item').forEach(item => {
            item.classList.remove('active');
            if (item.dataset.userId === userId) {
                item.classList.add('active');
            }
        });

        // Limpiar mensajes anteriores
        if (chatMessages) {
            chatMessages.innerHTML = '';
        }

        // Cargar mensajes
        await loadMessages(userId);

        // Marcar mensajes como le√≠dos
        markMessagesAsRead(userId);

        // Ocultar badge de no le√≠dos
        hideUnreadBadge(userId);

        // Habilitar input
        if (messageInput) {
            messageInput.disabled = false;
            messageInput.placeholder = `Escribe un mensaje para ${username}...`;
            messageInput.focus();
        }

        if (sendBtn) {
            sendBtn.disabled = false;
        }
    }
    
    // Exponer funci√≥n globalmente para uso externo
    window.selectUserById = selectUser;

    // Funci√≥n para actualizar el header del chat
    function updateChatHeader(userId, username, avatar) {
        const chatUserName = document.getElementById('chat-user-name');
        const chatUserAvatar = document.getElementById('chat-user-avatar');
        const chatUserStatus = document.getElementById('chat-user-status');
        const chatUserStatusText = document.getElementById('chat-user-status-text');
        const chatHeaderAvatarLink = document.getElementById('chat-header-avatar-link');

        if (chatUserName) chatUserName.textContent = username;
        if (chatUserAvatar) chatUserAvatar.src = avatar;
        
        // Actualizar link del avatar para ir al perfil
        if (chatHeaderAvatarLink) {
            chatHeaderAvatarLink.href = `ver-perfil.php?id=${userId}`;
        }

        // Actualizar estado online/offline
        const isOnline = onlineUsers.has(parseInt(userId));
        if (chatUserStatus) {
            chatUserStatus.className = `status-indicator ${isOnline ? 'online' : 'offline'}`;
        }
        if (chatUserStatusText) {
            chatUserStatusText.textContent = isOnline ? 'En l√≠nea' : 'Desconectado';
        }
    }

    // Funci√≥n para cargar mensajes
    async function loadMessages(userId) {
        try {
            const response = await fetch(`/MisTrabajos/HandinHand/api/get-messages.php?user_id=${userId}`);
            const data = await response.json();

            if (data.status === 'success' && data.messages) {
                data.messages.forEach(msg => {
                    appendMessage(msg);
                });

                // Scroll al √∫ltimo mensaje
                scrollToBottom();
            }
        } catch (error) {
            console.error('Error al cargar mensajes:', error);
        }
    }

    // Funci√≥n para agregar un mensaje al chat
    function appendMessage(messageData) {
        const chatMessagesElement = document.getElementById('chat-messages');
        console.log('üìù appendMessage llamado');
        console.log('   chatMessages element:', chatMessagesElement);
        console.log('   messageData:', messageData);
        
        if (!chatMessagesElement) {
            console.error('‚ùå ERROR: No se encontr√≥ el elemento chat-messages');
            return;
        }

        // Evitar duplicados: si el mensaje ya existe, no agregarlo
        if (messageData.id) {
            const existingMessage = chatMessagesElement.querySelector(`[data-message-id="${messageData.id}"]`);
            if (existingMessage) {
                console.log('   ‚ö†Ô∏è Mensaje duplicado ignorado, ID:', messageData.id);
                return;
            }
        }

        const isOwnMessage = messageData.sender_id.toString() === CURRENT_USER_ID.toString();
        const time = formatTime(messageData.timestamp);

        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isOwnMessage ? 'own' : ''}`;
        messageDiv.dataset.messageId = messageData.id || '';

        const avatarSrc = isOwnMessage ? CURRENT_USER_AVATAR : document.getElementById('chat-user-avatar')?.src || 'img/usuario.png';
        const senderName = isOwnMessage ? 'T√∫' : (document.getElementById('chat-user-name')?.textContent || 'Usuario');

        // HTML para la respuesta si existe
        let replyHTML = '';
        if (messageData.reply_to_message_id && messageData.reply_to_message) {
            replyHTML = `
                <div class="message-reply-preview">
                    <div class="reply-username">${escapeHtml(messageData.reply_to_username || 'Usuario')}</div>
                    <div class="reply-text">${escapeHtml(messageData.reply_to_message)}</div>
                </div>
            `;
        }

        // Indicador de mensaje editado
        const editedLabel = messageData.edited_at ? '<span class="message-edited">(editado)</span>' : '';

        // Opciones del men√∫ seg√∫n si es mensaje propio o no
        let menuOptions = `
            <div class="message-option-item" onclick="replyToMessage(${messageData.id || 0}, '${escapeHtml(messageData.message || messageData.mensaje).replace(/'/g, "\\'")}', '${senderName}')">
                <i class="fas fa-reply"></i>
                <span>Responder</span>
            </div>
        `;

        if (isOwnMessage) {
            // Si es mensaje propio: editar, eliminar para todos y eliminar para m√≠
            menuOptions += `
                <div class="message-option-item" onclick="editMessage(${messageData.id || 0}, '${escapeHtml(messageData.message || messageData.mensaje).replace(/'/g, "\\'")}')">
                    <i class="fas fa-edit"></i>
                    <span>Editar</span>
                </div>
                <div class="message-option-item danger" onclick="deleteMessage(${messageData.id || 0}, true, 'all')">
                    <i class="fas fa-trash-alt"></i>
                    <span>Eliminar para todos</span>
                </div>
                <div class="message-option-item danger" onclick="deleteMessage(${messageData.id || 0}, true, 'me')">
                    <i class="fas fa-trash"></i>
                    <span>Eliminar para m√≠</span>
                </div>
            `;
        } else {
            // Si es mensaje recibido: solo eliminar para m√≠
            menuOptions += `
                <div class="message-option-item danger" onclick="deleteMessage(${messageData.id || 0}, false, 'me')">
                    <i class="fas fa-trash"></i>
                    <span>Eliminar para m√≠</span>
                </div>
            `;
        }

        messageDiv.innerHTML = `
            <div class="message-avatar">
                <img src="${avatarSrc}" alt="Avatar">
            </div>
            <div class="message-content">
                <div class="message-bubble" data-message-id="${messageData.id || 0}">
                    ${replyHTML}
                    <span class="message-text">${escapeHtml(messageData.message || messageData.mensaje)}</span>
                    ${editedLabel}
                </div>
                <div class="message-time">${time}</div>
            </div>
            <div class="message-options">
                <button class="message-options-btn" onclick="event.stopPropagation(); toggleMessageMenu(this)">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <div class="message-options-menu">
                    ${menuOptions}
                </div>
            </div>
        `;

        console.log('   ‚úÖ Agregando mensaje al DOM');
        chatMessagesElement.appendChild(messageDiv);
        scrollToBottom();
    }

    // Funci√≥n para enviar mensaje
    async function sendMessage() {
        console.log('üì§ sendMessage() llamado');
        console.log('   messageInput:', messageInput);
        console.log('   currentChatUserId:', currentChatUserId);
        
        if (!messageInput || !currentChatUserId) {
            console.error('‚ùå No hay messageInput o currentChatUserId');
            return;
        }

        const message = messageInput.value.trim();
        console.log('   Mensaje a enviar:', message);
        
        if (!message) {
            console.log('   ‚ö†Ô∏è Mensaje vac√≠o, abortando');
            return;
        }

        const messageData = {
            message: message,
            sender_id: CURRENT_USER_ID,
            receiver_id: currentChatUserId,
            timestamp: new Date().toISOString(),
            reply_to_message_id: replyingToMessage ? replyingToMessage.id : null
        };

        console.log('üíæ Guardando mensaje en BD...');
        
        try {
            // Guardar en base de datos
            const response = await fetch('/MisTrabajos/HandinHand/api/save-message.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    receiver_id: currentChatUserId,
                    reply_to_message_id: replyingToMessage ? replyingToMessage.id : null
                })
            });

            const result = await response.json();
            console.log('üì• Respuesta de save-message.php:', result);

            if (result.status === 'success') {
                // Si hab√≠a una respuesta, a√±adirla a los datos del mensaje
                if (replyingToMessage) {
                    messageData.reply_to_message = replyingToMessage.text;
                    messageData.reply_to_username = replyingToMessage.sender;
                    messageData.reply_to_message_id = replyingToMessage.id;
                }

                // A√±adir el ID del mensaje
                messageData.id = result.message_id;
                console.log('üÜî ID del mensaje:', messageData.id);

                // Verificar estado de Socket.IO
                console.log('üîå Socket conectado:', socket?.connected);
                console.log('üîå Socket ID:', socket?.id);
                
                // Emitir a trav√©s de Socket.io
                if (socket && socket.connected) {
                    console.log('üì° Emitiendo mensaje a Socket.IO...');
                    socket.emit('chat_message', messageData);
                    console.log('‚úÖ Mensaje emitido - Esperando respuesta del servidor');
                    // El mensaje se mostrar√° cuando el servidor lo devuelva
                } else {
                    console.warn('‚ö†Ô∏è Socket.IO NO est√° conectado');
                    // Si no hay conexi√≥n, mostrar localmente
                    appendMessage(messageData);
                    scrollToBottom();
                }

                // Cancelar respuesta si hab√≠a una
                if (replyingToMessage) {
                    cancelReply();
                }

                // Limpiar input
                messageInput.value = '';
                messageInput.focus();
                
                // Actualizar vista previa del contacto
                updateContactPreview(currentChatUserId, message, 'T√∫');
            } else {
                console.error('Error al guardar mensaje:', result);
                alert('Error al enviar el mensaje. Por favor, intenta de nuevo.');
            }
        } catch (error) {
            console.error('Error al enviar mensaje:', error);
            alert('Error de conexi√≥n. Por favor, verifica tu conexi√≥n e intenta de nuevo.');
        }
    }

    // Funci√≥n para manejar mensajes entrantes
    function handleIncomingMessage(data) {
        console.log('üì¨ Procesando mensaje entrante:', data);
        console.log('   Chat actual abierto con:', currentChatUserId);
        console.log('   Mi ID:', CURRENT_USER_ID);
        console.log('   Sender ID:', data.sender_id);
        console.log('   Receiver ID:', data.receiver_id);
        
        // Determinar si el mensaje es para el chat actual
        const isForCurrentChat = currentChatUserId &&
            ((data.sender_id.toString() === currentChatUserId.toString() && data.receiver_id.toString() === CURRENT_USER_ID.toString()) ||
             (data.sender_id.toString() === CURRENT_USER_ID.toString() && data.receiver_id.toString() === currentChatUserId.toString()));

        if (isForCurrentChat) {
            // Mensaje para el chat actual (m√≠o o del otro usuario)
            console.log('   ‚úÖ Mostrando mensaje en chat actual');
            appendMessage(data);
            scrollToBottom();

            // Si no es mi mensaje, marcarlo como le√≠do y actualizar vista previa
            if (data.sender_id.toString() !== CURRENT_USER_ID.toString()) {
                markMessagesAsRead(data.sender_id);
                
                // Obtener el nombre del remitente del contacto
                const contactItem = document.querySelector(`.contact-item[data-user-id="${data.sender_id}"]`);
                const senderName = contactItem?.dataset.username || 'Usuario';
                updateContactPreview(data.sender_id, data.message, senderName);
            }
        } else if (data.receiver_id.toString() === CURRENT_USER_ID.toString()) {
            // Mensaje para m√≠ pero en otro chat
            console.log('   üì¨ Mensaje para otro chat, incrementando badge');
            incrementUnreadBadge(data.sender_id);
            
            // Actualizar vista previa del contacto
            const contactItem = document.querySelector(`.contact-item[data-user-id="${data.sender_id}"]`);
            const senderName = contactItem?.dataset.username || 'Usuario';
            updateContactPreview(data.sender_id, data.message, senderName);
        }
    }

    // Funci√≥n para cargar conteo de no le√≠dos
    async function loadUnreadCounts() {
        try {
            const response = await fetch('/MisTrabajos/HandinHand/api/get-unread-count.php');
            const data = await response.json();

            if (data.status === 'success') {
                updateAllUnreadBadges(data.unread_counts);
            }
        } catch (error) {
            console.error('Error al cargar conteo de no le√≠dos:', error);
        }
    }

    // Funci√≥n para actualizar todos los badges
    function updateAllUnreadBadges(counts) {
        Object.keys(counts).forEach(userId => {
            const count = counts[userId];
            const badge = document.querySelector(`.unread-badge[data-user-id="${userId}"]`);

            if (badge && count > 0) {
                const displayCount = count > 15 ? '+15' : count;
                badge.textContent = displayCount;
                badge.classList.add('show', 'pulse');
            }
        });
    }

    // Funci√≥n para incrementar badge
    function incrementUnreadBadge(userId) {
        const badge = document.querySelector(`.unread-badge[data-user-id="${userId}"]`);

        if (badge) {
            let currentCount = 0;
            const currentText = badge.textContent;

            if (currentText === '+15') {
                return; // Ya est√° al m√°ximo
            } else {
                currentCount = parseInt(currentText) || 0;
            }

            currentCount++;
            const displayCount = currentCount > 15 ? '+15' : currentCount;
            badge.textContent = displayCount;
            badge.classList.add('show', 'pulse');
        }
    }

    // Funci√≥n para ocultar badge
    function hideUnreadBadge(userId) {
        const badge = document.querySelector(`.unread-badge[data-user-id="${userId}"]`);
        if (badge) {
            badge.classList.remove('show', 'pulse');
        }
    }

    // Funci√≥n para marcar mensajes como le√≠dos
    async function markMessagesAsRead(senderId) {
        try {
            await fetch('/MisTrabajos/HandinHand/api/mark-as-read.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    sender_id: senderId
                })
            });
        } catch (error) {
            console.error('Error al marcar mensajes como le√≠dos:', error);
        }
    }

    // Funci√≥n para actualizar estado online
    function updateOnlineStatus(users) {
        console.log('üë• Usuarios online:', users);
        onlineUsers = new Set(users.map(id => parseInt(id)));

        // Actualizar indicadores de estado
        document.querySelectorAll('.status-indicator').forEach(indicator => {
            const userId = indicator.dataset.userId;
            if (userId) {
                const isOnline = onlineUsers.has(parseInt(userId));
                indicator.className = `status-indicator ${isOnline ? 'online' : 'offline'}`;
            }
        });

        // Actualizar estado en el header del chat si hay un chat abierto
        if (currentChatUserId) {
            const isOnline = onlineUsers.has(parseInt(currentChatUserId));
            const chatUserStatus = document.getElementById('chat-user-status');
            const chatUserStatusText = document.getElementById('chat-user-status-text');

            if (chatUserStatus) {
                chatUserStatus.className = `status-indicator ${isOnline ? 'online' : 'offline'}`;
            }
            if (chatUserStatusText) {
                chatUserStatusText.textContent = isOnline ? 'En l√≠nea' : 'Desconectado';
            }
        }
    }

    // Funci√≥n para filtrar contactos
    function filterContacts(query) {
        const items = document.querySelectorAll('.contact-item');
        const lowerQuery = query.toLowerCase();

        items.forEach(item => {
            const username = item.dataset.username.toLowerCase();
            if (username.includes(lowerQuery)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // Funci√≥n para hacer scroll al final
    function scrollToBottom() {
        if (chatMessages) {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }

    // Funci√≥n para formatear tiempo
    function formatTime(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diffInMs = now - date;
        const diffInMins = Math.floor(diffInMs / 60000);
        const diffInHours = Math.floor(diffInMs / 3600000);
        const diffInDays = Math.floor(diffInMs / 86400000);

        if (diffInMins < 1) {
            return 'Ahora';
        } else if (diffInMins < 60) {
            return `Hace ${diffInMins} min`;
        } else if (diffInHours < 24) {
            return `Hace ${diffInHours} h`;
        } else if (diffInDays < 7) {
            return `Hace ${diffInDays} d√≠as`;
        } else {
            return date.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit' });
        }
    }

    // Funci√≥n auxiliar para escapar HTML
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // Toggle del men√∫ de opciones del mensaje
    window.toggleMessageMenu = function(button) {
        const menu = button.nextElementSibling;
        
        // Cerrar todos los men√∫s abiertos
        document.querySelectorAll('.message-options-menu.show').forEach(m => {
            if (m !== menu) {
                m.classList.remove('show');
                m.classList.remove('show-above');
            }
        });
        
        // Toggle del men√∫
        const isShowing = menu.classList.contains('show');
        menu.classList.toggle('show');
        
        if (!isShowing) {
            // El men√∫ se est√° abriendo, posicionarlo
            setTimeout(() => {
                const buttonRect = button.getBoundingClientRect();
                const menuRect = menu.getBoundingClientRect();
                const viewportHeight = window.innerHeight;
                const viewportWidth = window.innerWidth;
                
                // Calcular espacio disponible
                const spaceBelow = viewportHeight - buttonRect.bottom;
                const spaceAbove = buttonRect.top;
                const menuHeight = menuRect.height;
                
                let top, left;
                
                // Decidir si mostrar arriba o abajo
                if (spaceBelow < menuHeight + 10 && spaceAbove > menuHeight + 10) {
                    // Mostrar arriba
                    top = buttonRect.top - menuHeight - 4;
                    menu.classList.add('show-above');
                } else {
                    // Mostrar abajo
                    top = buttonRect.bottom + 4;
                    menu.classList.remove('show-above');
                }
                
                // Posicionar a la derecha del bot√≥n, pero ajustar si se sale del viewport
                left = buttonRect.right - menu.offsetWidth;
                
                // Asegurar que no se salga por la izquierda
                if (left < 10) {
                    left = 10;
                }
                
                // Asegurar que no se salga por la derecha
                if (left + menu.offsetWidth > viewportWidth - 10) {
                    left = viewportWidth - menu.offsetWidth - 10;
                }
                
                // Aplicar posici√≥n
                menu.style.top = `${top}px`;
                menu.style.left = `${left}px`;
            }, 0);
        } else {
            // El men√∫ se est√° cerrando
            menu.classList.remove('show-above');
        }
    };

    // Cerrar men√∫s al hacer clic fuera
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.message-options')) {
            document.querySelectorAll('.message-options-menu.show').forEach(m => {
                m.classList.remove('show');
            });
        }
    });

    // Cerrar chat al presionar ESC
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            // Si hay un modal abierto, cerrarlo primero
            const editModal = document.getElementById('editMessageModal');
            const deleteModal = document.getElementById('deleteMessageModal');
            
            if (editModal?.classList.contains('show')) {
                closeEditModal();
                return;
            }
            
            if (deleteModal?.classList.contains('show')) {
                closeDeleteMessageModal();
                return;
            }
            
            // Si no hay modales abiertos y hay un chat activo, cerrarlo
            const chatPanel = document.getElementById('chat-panel');
            if (chatPanel?.classList.contains('active')) {
                closeChatPanel();
            }
        }
    });

    // Funci√≥n para cerrar el panel de chat
    function closeChatPanel() {
        const chatPanel = document.getElementById('chat-panel');
        const welcomeScreen = document.getElementById('welcome-screen');
        
        if (chatPanel) {
            chatPanel.classList.remove('active');
        }
        
        if (welcomeScreen) {
            welcomeScreen.classList.remove('hidden');
        }
        
        // Desmarcar contacto activo
        document.querySelectorAll('.contact-item').forEach(item => {
            item.classList.remove('active');
        });
        
        // Limpiar el chat actual
        currentChatUserId = null;
        
        // Limpiar mensajes
        const messagesContainer = document.getElementById('messages-container');
        if (messagesContainer) {
            messagesContainer.innerHTML = '';
        }
        
        console.log('‚úÖ Chat cerrado');
    }

    // Variables para edici√≥n
    let currentEditMessageId = null;
    let currentEditOriginalText = '';

    // Funci√≥n para abrir modal de edici√≥n
    window.editMessage = function(messageId, currentText) {
        console.log('‚úèÔ∏è Abriendo modal de edici√≥n:', messageId);
        
        // Cerrar men√∫
        document.querySelectorAll('.message-options-menu.show').forEach(m => m.classList.remove('show'));
        
        // Guardar datos
        currentEditMessageId = messageId;
        currentEditOriginalText = currentText;
        
        // Llenar el textarea
        const textarea = document.getElementById('edit-message-textarea');
        if (textarea) {
            textarea.value = currentText;
            updateCharCount();
            
            // Mostrar modal
            const modal = document.getElementById('editMessageModal');
            if (modal) {
                modal.classList.add('show');
                
                // Enfocar el textarea despu√©s de que se muestre el modal
                setTimeout(() => {
                    textarea.focus();
                    textarea.setSelectionRange(textarea.value.length, textarea.value.length);
                }, 100);
            }
        }
    };

    // Funci√≥n para cerrar modal de edici√≥n
    window.closeEditModal = function() {
        const modal = document.getElementById('editMessageModal');
        if (modal) {
            modal.classList.remove('show');
        }
        currentEditMessageId = null;
        currentEditOriginalText = '';
    };

    // Funci√≥n para actualizar contador de caracteres
    function updateCharCount() {
        const textarea = document.getElementById('edit-message-textarea');
        const counter = document.getElementById('edit-char-count');
        const counterContainer = textarea?.parentElement.querySelector('.edit-message-counter');
        
        if (textarea && counter) {
            const length = textarea.value.length;
            counter.textContent = length;
            
            if (counterContainer) {
                counterContainer.classList.remove('warning', 'error');
                if (length > 1800) {
                    counterContainer.classList.add('error');
                } else if (length > 1500) {
                    counterContainer.classList.add('warning');
                }
            }
        }
    }

    // Listener para el textarea
    const editTextarea = document.getElementById('edit-message-textarea');
    if (editTextarea) {
        editTextarea.addEventListener('input', updateCharCount);
        
        // Permitir guardar con Ctrl+Enter
        editTextarea.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'Enter') {
                saveEditedMessage();
            }
            // Cerrar con Escape
            if (e.key === 'Escape') {
                closeEditModal();
            }
        });
    }

    // Funci√≥n para guardar mensaje editado
    window.saveEditedMessage = async function() {
        const textarea = document.getElementById('edit-message-textarea');
        if (!textarea || !currentEditMessageId) return;
        
        const newMessage = textarea.value.trim();
        
        if (!newMessage) {
            showNotification('El mensaje no puede estar vac√≠o', 'error');
            return;
        }
        
        if (newMessage === currentEditOriginalText.trim()) {
            console.log('‚ö†Ô∏è El mensaje no cambi√≥');
            closeEditModal();
            return;
        }
        
        if (newMessage.length > 2000) {
            showNotification('El mensaje es demasiado largo (m√°ximo 2000 caracteres)', 'error');
            return;
        }
        
        try {
            const response = await fetch('api/edit-message.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message_id: currentEditMessageId,
                    new_message: newMessage
                })
            });
            
            const data = await response.json();
            
            console.log('üì• Respuesta del servidor:', data);
            
            if (data.success === true) {
                console.log('‚úÖ Mensaje editado correctamente');
                
                // Actualizar el mensaje en el DOM
                const messageBubble = document.querySelector(`.message-bubble[data-message-id="${currentEditMessageId}"]`);
                if (messageBubble) {
                    const messageText = messageBubble.querySelector('.message-text');
                    if (messageText) {
                        messageText.textContent = newMessage;
                        
                        // Agregar indicador de editado si no existe
                        let editedLabel = messageBubble.querySelector('.message-edited');
                        if (!editedLabel) {
                            editedLabel = document.createElement('span');
                            editedLabel.className = 'message-edited';
                            editedLabel.textContent = ' (editado)';
                            messageBubble.appendChild(editedLabel);
                        }
                    }
                }
                
                // Notificar al otro usuario via Socket.IO
                if (socket && currentChatUserId) {
                    console.log('üì° Emitiendo evento message_edited:', {
                        message_id: currentEditMessageId,
                        new_message: newMessage,
                        receiver_id: currentChatUserId,
                        edited_at: data.data?.edited_at || new Date().toISOString()
                    });
                    
                    socket.emit('message_edited', {
                        message_id: currentEditMessageId,
                        new_message: newMessage,
                        receiver_id: currentChatUserId,
                        edited_at: data.data?.edited_at || new Date().toISOString()
                    });
                } else {
                    console.warn('‚ö†Ô∏è No se pudo emitir message_edited. socket:', !!socket, 'currentChatUserId:', currentChatUserId);
                }
                
                showNotification('Mensaje editado correctamente', 'success');
                closeEditModal();
            } else {
                console.error('‚ùå Error del servidor:', data);
                showNotification(data.message || 'Error al editar el mensaje', 'error');
            }
        } catch (error) {
            console.error('‚ùå Error en saveEditedMessage:', error);
            showNotification('Error al editar el mensaje', 'error');
        }
    };

    // Variables para eliminaci√≥n
    let currentDeleteMessageId = null;
    let currentDeleteIsOwn = false;
    let currentDeleteType = 'me'; // 'all' o 'me'

    // Funci√≥n para mostrar modal de eliminaci√≥n
    window.deleteMessage = function(messageId, isOwnMessage, deleteType = 'me') {
        console.log('üóëÔ∏è Abriendo modal de eliminaci√≥n:', messageId, 'isOwn:', isOwnMessage, 'type:', deleteType);
        
        // Cerrar men√∫
        document.querySelectorAll('.message-options-menu.show').forEach(m => m.classList.remove('show'));
        
        // Guardar datos
        currentDeleteMessageId = messageId;
        currentDeleteIsOwn = isOwnMessage;
        currentDeleteType = deleteType;
        
        // Obtener el texto del mensaje
        const messageBubble = document.querySelector(`.message-bubble[data-message-id="${messageId}"]`);
        const messageText = messageBubble?.querySelector('.message-text')?.textContent || '';
        
        // Configurar el modal
        const modal = document.getElementById('deleteMessageModal');
        const title = document.getElementById('delete-message-title');
        const description = document.getElementById('delete-message-description');
        const preview = document.getElementById('delete-message-text');
        const buttonText = document.getElementById('delete-button-text');
        
        if (modal && title && description && preview && buttonText) {
            if (deleteType === 'all') {
                title.textContent = '¬øEliminar para todos?';
                description.textContent = 'Este mensaje se eliminar√° para ti y para el otro usuario. Esta acci√≥n no se puede deshacer.';
                buttonText.textContent = 'Eliminar para todos';
            } else {
                title.textContent = '¬øEliminar para ti?';
                description.textContent = 'Este mensaje se eliminar√° solo para ti. El otro usuario a√∫n podr√° verlo.';
                buttonText.textContent = 'Eliminar para m√≠';
            }
            
            preview.textContent = messageText;
            modal.classList.add('show');
        }
    };

    // Funci√≥n para cerrar modal de eliminaci√≥n
    window.closeDeleteMessageModal = function() {
        const modal = document.getElementById('deleteMessageModal');
        if (modal) {
            modal.classList.remove('show');
        }
        currentDeleteMessageId = null;
        currentDeleteIsOwn = false;
        currentDeleteType = 'me';
    };

    // Funci√≥n para confirmar eliminaci√≥n
    window.confirmDeleteMessage = async function() {
        if (!currentDeleteMessageId) return;
        
        const messageId = currentDeleteMessageId;
        const deleteType = currentDeleteType;
        
        console.log('üóëÔ∏è Confirmando eliminaci√≥n:', messageId, 'tipo:', deleteType);
        
        // Cerrar modal
        closeDeleteMessageModal();
        
        try {
            const response = await fetch('api/delete-message.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message_id: messageId,
                    delete_for_all: deleteType === 'all'
                })
            });
            
            const data = await response.json();
            
            if (data.success === true) {
                console.log('‚úÖ Mensaje eliminado correctamente');
                
                // Eliminar el mensaje del DOM
                const messageDiv = document.querySelector(`[data-message-id="${messageId}"]`)?.closest('.message');
                if (messageDiv) {
                    messageDiv.remove();
                }
                
                // Notificar al otro usuario via Socket.IO si es eliminaci√≥n completa
                if (socket && currentChatUserId && data.data.delete_type === 'complete') {
                    socket.emit('message_deleted', {
                        message_id: messageId,
                        receiver_id: currentChatUserId
                    });
                }
                
                const deleteTypeText = deleteType === 'all' ? 'para todos' : 'para ti';
                showNotification(`Mensaje eliminado ${deleteTypeText}`, 'success');
            } else {
                console.error('‚ùå Error al eliminar:', data.message);
                showNotification(data.message || 'Error al eliminar el mensaje', 'error');
            }
        } catch (error) {
            console.error('‚ùå Error en confirmDeleteMessage:', error);
            showNotification('Error al eliminar el mensaje', 'error');
        }
    };

    // ==================== EMOJI PICKER ====================
    
    const emojiPicker = document.getElementById('emoji-picker');
    const emojiBtn = document.getElementById('emoji-btn');
    const emojiContent = document.getElementById('emoji-content');
    
    // Categor√≠as de emojis
    const emojiCategories = {
        smileys: ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ', 'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', 'üòö', 'üòô', 'ü•≤', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ó', 'ü§≠', 'ü§´', 'ü§î', 'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üòè', 'üòí', 'üôÑ', 'üò¨', 'ü§•', 'üòå', 'üòî', 'üò™', 'ü§§', 'üò¥'],
        gestures: ['üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', 'üí™', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂'],
        animals: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üêî', 'üêß', 'üê¶', 'üê§', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú', 'ü¶ü', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ', 'ü¶ï', 'üêô', 'ü¶ë', 'ü¶ê', 'ü¶û', 'ü¶Ä', 'üê°', 'üê†', 'üêü', 'üê¨', 'üê≥', 'üêã', 'ü¶à'],
        food: ['üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•¨', 'ü•í', 'üå∂Ô∏è', 'ü´ë', 'üåΩ', 'ü•ï', 'üßÑ', 'üßÖ', 'ü•î', 'üç†', 'ü•ê', 'ü•Ø', 'üçû', 'ü•ñ', 'ü•®', 'üßÄ', 'ü•ö', 'üç≥', 'üßà', 'ü•û', 'üßá', 'ü•ì', 'ü•©', 'üçó', 'üçñ', 'üå≠', 'üçî', 'üçü', 'üçï', 'ü´ì', 'ü•™', 'ü•ô', 'üßÜ', 'üåÆ', 'üåØ', 'ü´î', 'ü•ó', 'ü•ò', 'ü´ï', 'üçù', 'üçú', 'üç≤', 'üçõ', 'üç£', 'üç±', 'ü•ü', 'üç§', 'üçô', 'üçö', 'üçò', 'üç•', 'ü•†', 'ü•Æ', 'üç¢', 'üç°', 'üçß', 'üç®', 'üç¶', 'ü•ß', 'üßÅ', 'üç∞', 'üéÇ', 'üçÆ', 'üç≠', 'üç¨', 'üç´', 'üçø', 'üç©', 'üç™', 'üå∞', 'ü•ú', 'üçØ', 'ü•õ', 'üçº', '‚òï', 'üçµ', 'üßÉ', 'ü•§', 'üç∂', 'üç∫', 'üçª', 'ü•Ç', 'üç∑', 'ü•É', 'üç∏', 'üçπ', 'üßâ', 'üçæ', 'üßä'],
        activities: ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', 'ü™É', 'ü•Ö', '‚õ≥', 'ü™Å', 'üèπ', 'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõº', '‚õ∏Ô∏è', 'ü•å', 'üéø', '‚õ∑Ô∏è', 'üèÇ', 'ü™Ç', 'üèãÔ∏è', 'ü§∏', 'ü§∫', 'ü§æ', 'üèåÔ∏è', 'üèá', 'üßò', 'üèä', 'ü§Ω', 'üö£', 'üßó', 'üö¥', 'üöµ', 'üéØ', 'üéÆ', 'üé∞', 'üé≤', 'üß©', 'üé™', 'üé≠', 'üé®', 'üé¨', 'üé§', 'üéß', 'üéº', 'üéπ', 'ü•Å', 'üé∑', 'üé∫', 'ü™ó', 'üé∏', 'ü™ï', 'üéª'],
        objects: ['‚åö', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üïπÔ∏è', 'üóúÔ∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑', 'üì∏', 'üìπ', 'üé•', 'üìΩÔ∏è', 'üéûÔ∏è', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéôÔ∏è', 'üéöÔ∏è', 'üéõÔ∏è', 'üß≠', '‚è±Ô∏è', '‚è≤Ô∏è', '‚è∞', 'üï∞Ô∏è', '‚åõ', '‚è≥', 'üì°', 'üîã', 'üîå', 'üí°', 'üî¶', 'üïØÔ∏è', 'ü™î', 'üßØ', 'üõ¢Ô∏è', 'üí∏', 'üíµ', 'üí¥', 'üí∂', 'üí∑', 'üí∞', 'üí≥', 'üíé', '‚öñÔ∏è', 'ü™ú', 'üß∞', 'ü™õ', 'üîß', 'üî®', '‚öíÔ∏è', 'üõ†Ô∏è', '‚õèÔ∏è', 'ü™ì', 'ü™ö', 'üî©', '‚öôÔ∏è', 'üß±', '‚õìÔ∏è', 'üß≤', 'üî´', 'üí£', 'üß®', 'ü™É', 'üî™', 'üó°Ô∏è', '‚öîÔ∏è', 'üõ°Ô∏è', 'üö¨', '‚ö∞Ô∏è', 'ü™¶', '‚ö±Ô∏è', 'üè∫', 'üîÆ', 'üìø', 'üßø', 'üíà', '‚öóÔ∏è', 'üî≠', 'üî¨', 'üï≥Ô∏è', 'ü©π', 'ü©∫', 'üíä', 'üíâ', 'ü©∏', 'üß¨', 'ü¶†', 'üß´', 'üß™', 'üå°Ô∏è', 'üßπ', 'ü™†', 'üß∫', 'üßª', 'üöΩ', 'üö∞', 'üöø', 'üõÅ', 'üõÄ', 'üßº', 'ü™•', 'ü™í', 'üßΩ', 'ü™£', 'üß¥', 'üõéÔ∏è', 'üîë', 'üóùÔ∏è', 'üö™', 'ü™ë', 'üõãÔ∏è', 'üõèÔ∏è', 'üõå', 'üß∏', 'üñºÔ∏è', 'ü™Ü', 'ü™û', 'ü™ü', 'üõçÔ∏è', 'üõí', 'üéÅ', 'üéà', 'üéè', 'üéÄ', 'ü™Ñ', 'ü™Ö', 'üéä', 'üéâ', 'üéé', 'üèÆ', 'üéê', 'üßß', '‚úâÔ∏è', 'üì©', 'üì®', 'üìß', 'üíå', 'üì•', 'üì§', 'üì¶', 'üè∑Ô∏è', 'ü™ß', 'üì™', 'üì´', 'üì¨', 'üì≠', 'üìÆ', 'üìØ', 'üìú', 'üìÉ', 'üìÑ', 'üìë', 'üßæ', 'üìä', 'üìà', 'üìâ', 'üóíÔ∏è', 'üóìÔ∏è', 'üìÜ', 'üìÖ', 'üóëÔ∏è', 'üìá', 'üóÉÔ∏è', 'üó≥Ô∏è', 'üóÑÔ∏è', 'üìã', 'üìÅ', 'üìÇ', 'üóÇÔ∏è', 'üóûÔ∏è', 'üì∞', 'üìì', 'üìî', 'üìí', 'üìï', 'üìó', 'üìò', 'üìô', 'üìö', 'üìñ', 'üîñ', 'üß∑', 'üîó', 'üìé', 'üñáÔ∏è', 'üìê', 'üìè', 'üßÆ', 'üìå', 'üìç', '‚úÇÔ∏è', 'üñäÔ∏è', 'üñãÔ∏è', '‚úíÔ∏è', 'üñåÔ∏è', 'üñçÔ∏è', 'üìù', '‚úèÔ∏è', 'üîç', 'üîé', 'üîè', 'üîê', 'üîí', 'üîì'],
        symbols: ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê', '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê', '‚ôë', '‚ôí', '‚ôì', 'üÜî', '‚öõÔ∏è', 'üâë', '‚ò¢Ô∏è', '‚ò£Ô∏è', 'üì¥', 'üì≥', 'üà∂', 'üàö', 'üà∏', 'üà∫', 'üà∑Ô∏è', '‚ú¥Ô∏è', 'üÜö', 'üíÆ', 'üâê', '„äôÔ∏è', '„äóÔ∏è', 'üà¥', 'üàµ', 'üàπ', 'üà≤', 'üÖ∞Ô∏è', 'üÖ±Ô∏è', 'üÜé', 'üÜë', 'üÖæÔ∏è', 'üÜò', '‚ùå', '‚≠ï', 'üõë', '‚õî', 'üìõ', 'üö´', 'üíØ', 'üí¢', '‚ô®Ô∏è', 'üö∑', 'üöØ', 'üö≥', 'üö±', 'üîû', 'üìµ', 'üö≠', '‚ùó', '‚ùï', '‚ùì', '‚ùî', '‚ÄºÔ∏è', '‚ÅâÔ∏è', 'üîÖ', 'üîÜ', '„ÄΩÔ∏è', '‚ö†Ô∏è', 'üö∏', 'üî±', '‚öúÔ∏è', 'üî∞', '‚ôªÔ∏è', '‚úÖ', 'üàØ', 'üíπ', '‚ùáÔ∏è', '‚ú≥Ô∏è', '‚ùé', 'üåê', 'üí†', '‚ìÇÔ∏è', 'üåÄ', 'üí§', 'üèß', 'üöæ', '‚ôø', 'üÖøÔ∏è', 'üõó', 'üà≥', 'üàÇÔ∏è', 'üõÇ', 'üõÉ', 'üõÑ', 'üõÖ', 'üöπ', 'üö∫', 'üöº', '‚ößÔ∏è', 'üöª', 'üöÆ', 'üé¶', 'üì∂', 'üàÅ', 'üî£', '‚ÑπÔ∏è', 'üî§', 'üî°', 'üî†', 'üÜñ', 'üÜó', 'üÜô', 'üÜí', 'üÜï', 'üÜì', '0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü', 'üî¢', '#Ô∏è‚É£', '*Ô∏è‚É£', '‚èèÔ∏è', '‚ñ∂Ô∏è', '‚è∏Ô∏è', '‚èØÔ∏è', '‚èπÔ∏è', '‚è∫Ô∏è', '‚è≠Ô∏è', '‚èÆÔ∏è', '‚è©', '‚è™', '‚è´', '‚è¨', '‚óÄÔ∏è', 'üîº', 'üîΩ', '‚û°Ô∏è', '‚¨ÖÔ∏è', '‚¨ÜÔ∏è', '‚¨áÔ∏è', '‚ÜóÔ∏è', '‚ÜòÔ∏è', '‚ÜôÔ∏è', '‚ÜñÔ∏è', '‚ÜïÔ∏è', '‚ÜîÔ∏è', '‚Ü™Ô∏è', '‚Ü©Ô∏è', '‚§¥Ô∏è', '‚§µÔ∏è', 'üîÄ', 'üîÅ', 'üîÇ', 'üîÑ', 'üîÉ', 'üéµ', 'üé∂', '‚ûï', '‚ûñ', '‚ûó', '‚úñÔ∏è', '‚ôæÔ∏è', 'üí≤', 'üí±', '‚Ñ¢Ô∏è', '¬©Ô∏è', '¬ÆÔ∏è', '„Ä∞Ô∏è', '‚û∞', '‚ûø', 'üîö', 'üîô', 'üîõ', 'üîù', 'üîú', '‚úîÔ∏è', '‚òëÔ∏è', 'üîò', 'üî¥', 'üü†', 'üü°', 'üü¢', 'üîµ', 'üü£', '‚ö´', '‚ö™', 'üü§', 'üî∫', 'üîª', 'üî∏', 'üîπ', 'üî∂', 'üî∑', 'üî≥', 'üî≤', '‚ñ™Ô∏è', '‚ñ´Ô∏è', '‚óæ', '‚óΩ', '‚óºÔ∏è', '‚óªÔ∏è', 'üü•', 'üüß', 'üü®', 'üü©', 'üü¶', 'üü™', '‚¨õ', '‚¨ú', 'üü´', 'üîà', 'üîá', 'üîâ', 'üîä', 'üîî', 'üîï', 'üì£', 'üì¢', 'üí¨', 'üí≠', 'üóØÔ∏è', '‚ô†Ô∏è', '‚ô£Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', 'üÉè', 'üé¥', 'üÄÑ', 'üïê', 'üïë', 'üïí', 'üïì', 'üïî', 'üïï', 'üïñ', 'üïó', 'üïò', 'üïô', 'üïö', 'üïõ', 'üïú', 'üïù', 'üïû', 'üïü', 'üï†', 'üï°', 'üï¢', 'üï£', 'üï§', 'üï•', 'üï¶', 'üïß']
    };
    
    let currentCategory = 'smileys';
    
    // Renderizar emojis de una categor√≠a
    function renderEmojis(category) {
        emojiContent.innerHTML = '';
        const emojis = emojiCategories[category] || [];
        
        emojis.forEach(emoji => {
            const button = document.createElement('button');
            button.className = 'emoji-item';
            button.textContent = emoji;
            button.onclick = () => insertEmoji(emoji);
            emojiContent.appendChild(button);
        });
    }
    
    // Insertar emoji en el input
    function insertEmoji(emoji) {
        const cursorPos = messageInput.selectionStart;
        const textBefore = messageInput.value.substring(0, cursorPos);
        const textAfter = messageInput.value.substring(cursorPos);
        
        messageInput.value = textBefore + emoji + textAfter;
        messageInput.focus();
        
        // Colocar el cursor despu√©s del emoji
        const newCursorPos = cursorPos + emoji.length;
        messageInput.setSelectionRange(newCursorPos, newCursorPos);
        
        // NO cerrar el picker para permitir seleccionar m√∫ltiples emojis
        // emojiPicker.classList.remove('show');
    }
    
    // Toggle del emoji picker
    if (emojiBtn) {
        emojiBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            const isShowing = emojiPicker.classList.contains('show');
            emojiPicker.classList.toggle('show');
            
            if (!isShowing) {
                // Posicionar el picker
                const btnRect = emojiBtn.getBoundingClientRect();
                const pickerWidth = Math.min(360, window.innerWidth * 0.95); // Max 360px o 95% del viewport
                const pickerHeight = 380; // Altura aproximada con header
                
                let left = btnRect.left;
                let top = btnRect.top - pickerHeight - 10;
                
                // Ajustar si se sale por la izquierda
                if (left < 10) left = 10;
                
                // Ajustar si se sale por la derecha
                if (left + pickerWidth > window.innerWidth - 10) {
                    left = window.innerWidth - pickerWidth - 10;
                }
                
                // Si no hay espacio arriba, mostrar abajo
                if (top < 10) {
                    top = btnRect.bottom + 10;
                }
                
                emojiPicker.style.left = `${left}px`;
                emojiPicker.style.top = `${top}px`;
                emojiPicker.style.width = `${pickerWidth}px`;
                
                // Renderizar emojis de la categor√≠a actual
                renderEmojis(currentCategory);
            }
        });
    }
    
    // Botones de categor√≠as
    document.querySelectorAll('.emoji-category-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.stopPropagation();
            const category = btn.dataset.category;
            currentCategory = category;
            
            // Actualizar bot√≥n activo
            document.querySelectorAll('.emoji-category-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            // Renderizar emojis de la nueva categor√≠a
            renderEmojis(category);
        });
    });
    
    // Cerrar picker al hacer click fuera
    document.addEventListener('click', (e) => {
        if (!emojiPicker.contains(e.target) && e.target !== emojiBtn) {
            emojiPicker.classList.remove('show');
        }
    });

    console.log('‚úÖ Sistema de chat inicializado correctamente');
    
    // Flag para indicar que el chat est√° listo
    window.chatInitialized = true;
});
